from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler
import random

# –û–ø—Ü—ñ—ó –≥—Ä–∏
CHOICES = ["–ö–∞–º—ñ–Ω—å", "–ù–æ–∂–∏—Ü—ñ", "–ü–∞–ø—ñ—Ä"]

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—á–æ–∫ —ñ —Ä–µ–∫–æ—Ä–¥—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_scores = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∫–æ—Ä–¥—É
def update_record(user_id):
    if user_scores[user_id]['score'] > user_scores[user_id]['record']:
        user_scores[user_id]['record'] = user_scores[user_id]['score']

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç"
async def start(update: Update, context):
    user_id = update.effective_user.id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ—á–æ–∫, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å–∫–∞—î –≥—Ä—É –≤–ø–µ—Ä—à–µ
    if user_id not in user_scores:
        user_scores[user_id] = {"score": 0, "record": 0}

    keyboard = [
        [InlineKeyboardButton("–ö–∞–º—ñ–Ω—å", callback_data="–ö–∞–º—ñ–Ω—å")],
        [InlineKeyboardButton("–ù–æ–∂–∏—Ü—ñ", callback_data="–ù–æ–∂–∏—Ü—ñ")],
        [InlineKeyboardButton("–ü–∞–ø—ñ—Ä", callback_data="–ü–∞–ø—ñ—Ä")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ì—Ä–∞–π–º–æ! –û–±–µ—Ä–∏ —Å–≤—ñ–π —Ö—ñ–¥:\n"
        f"–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {user_scores[user_id]['score']} | –†–µ–∫–æ—Ä–¥: {user_scores[user_id]['record']}",
        reply_markup=reply_markup
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É
async def handle_choice(update: Update, context):
    user_id = update.effective_user.id
    user_choice = update.callback_query.data
    bot_choice = random.choice(CHOICES)

    # –õ–æ–≥—ñ–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è
    if user_choice == bot_choice:
        result = f"–ù—ñ—á–∏—è! –ú–∏ –æ–±–∏–¥–≤–∞ –æ–±—Ä–∞–ª–∏ {user_choice}."
    elif (user_choice == "–ö–∞–º—ñ–Ω—å" and bot_choice == "–ù–æ–∂–∏—Ü—ñ") or \
         (user_choice == "–ù–æ–∂–∏—Ü—ñ" and bot_choice == "–ü–∞–ø—ñ—Ä") or \
         (user_choice == "–ü–∞–ø—ñ—Ä" and bot_choice == "–ö–∞–º—ñ–Ω—å"):
        user_scores[user_id]['score'] += 1  # –î–æ–¥–∞—Ç–∏ –æ—á–∫–æ
        update_record(user_id)  # –û–Ω–æ–≤–∏—Ç–∏ —Ä–µ–∫–æ—Ä–¥
        result = f"–¢–∏ –≤–∏–≥—Ä–∞–≤! üéâ –Ø –æ–±—Ä–∞–≤ {bot_choice}, –∞ —Ç–∏ ‚Äî {user_choice}.\n" \
                 f"–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {user_scores[user_id]['score']} | –†–µ–∫–æ—Ä–¥: {user_scores[user_id]['record']}."
    else:
        user_scores[user_id]['score'] = 0  # –°–∫–∏–Ω—É—Ç–∏ –æ—á–∫–∏
        result = f"–¢–∏ –ø—Ä–æ–≥—Ä–∞–≤! üòú –Ø –æ–±—Ä–∞–≤ {bot_choice}, –∞ —Ç–∏ ‚Äî {user_choice}.\n" \
                 f"–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ –æ–±–Ω—É–ª–µ–Ω–æ. –†–µ–∫–æ—Ä–¥: {user_scores[user_id]['record']}."

    # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç" —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    keyboard = [
        [InlineKeyboardButton("–ö–∞–º—ñ–Ω—å", callback_data="–ö–∞–º—ñ–Ω—å")],
        [InlineKeyboardButton("–ù–æ–∂–∏—Ü—ñ", callback_data="–ù–æ–∂–∏—Ü—ñ")],
        [InlineKeyboardButton("–ü–∞–ø—ñ—Ä", callback_data="–ü–∞–ø—ñ—Ä")],
        [InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data="restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(result, reply_markup=reply_markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
async def restart(update: Update, context):
    user_id = update.effective_user.id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ—á–æ–∫, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–µ –Ω–µ–º–∞—î —É —Å–ª–æ–≤–Ω–∏–∫—É
    if user_id not in user_scores:
        user_scores[user_id] = {"score": 0, "record": 0}

    # –û–±–Ω—É–ª–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_scores[user_id]['score'] = 0

    keyboard = [
        [InlineKeyboardButton("–ö–∞–º—ñ–Ω—å", callback_data="–ö–∞–º—ñ–Ω—å")],
        [InlineKeyboardButton("–ù–æ–∂–∏—Ü—ñ", callback_data="–ù–æ–∂–∏—Ü—ñ")],
        [InlineKeyboardButton("–ü–∞–ø—ñ—Ä", callback_data="–ü–∞–ø—ñ—Ä")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        f"–ì—Ä—É –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ! –ü–æ—á–Ω–µ–º–æ –∑–Ω–æ–≤—É.\n"
        f"–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {user_scores[user_id]['score']} | –†–µ–∫–æ—Ä–¥: {user_scores[user_id]['record']}",
        reply_markup=reply_markup
    )

# –ì–æ–ª–æ–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç" –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def show_start_button(update: Update, context):
    keyboard = [[InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data="restart")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω–∏ '–°—Ç–∞—Ä—Ç', —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É:", reply_markup=reply_markup)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token("8051441469:AAEXltyEuklWvaVBsQrvbuMm5dldCSohjzA").build()

    app.add_handler(CommandHandler("start", show_start_button))  # –ì–æ–ª–æ–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç"
    app.add_handler(CallbackQueryHandler(handle_choice, pattern="^(–ö–∞–º—ñ–Ω—å|–ù–æ–∂–∏—Ü—ñ|–ü–∞–ø—ñ—Ä)$"))
    app.add_handler(CallbackQueryHandler(restart, pattern="^restart$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == "__main__":
    main()

